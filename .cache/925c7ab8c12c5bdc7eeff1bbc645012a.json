{"Introduction": "Google hereby grants permission to reproduce the tables and figures in this paper solely for use in journalistic or scholarly works . The dominant sequence transduction models are based on complex recurrent or convolutional neural networks that include an encoder and a decoder .", "Main Points": "We propose a new simple network architecture, the Transformer, based solely on attention mechanisms . Experiments on two machine translation tasks show these models to be superior in quality while being more parallelizable and requiring significantly less time to train . Our model achieves 28.4 BLEU on the WMT 2014 English-to-German translation task .\n\nJakob proposed replacing RNNs with self-attention and started the effort to evaluate this idea . Ashish, with Illia, designed and implemented the first Transformer models . Niki designed, implemented, tuned and evaluated countless model variants in our original codebase .\n\nimplementing tensor2ensor greatly improved results and massively accelerating our research . Recurrent neural networks, long short-term memory [ 13] and gated recurrent [ 7] neural networks in particular, have been established as state of the art approaches in sequence modeling and transduction problems such as language modeling and machine translation [ 35,2,5]. Numerous efforts have since continued to push the boundaries of recurrence language models and encoder-decoder architecture [38, 24, 15].\n\nRecurrent models factor computation along the symbol positions of the input and output sequences . This inherently sequential nature precludes parallelization within training examples . Recent work has achieved significant improvements in computational efficiency through factorization tricks [ 21] and conditional computation [ 32] while also improving model performance in case of the latter .\n\nIn all but a few cases, such attention mechanisms are used in conjunction with a recurrent network . The Transformer allows for significantly more parallelization and can reach a new state of the art in translation quality after being trained for as little as twelve hours on eight P100 GPUs .\n\nThe goal of reducing sequential computation also forms the foundation of the Extended Neural GPU [16], ByteNet [ 18] and ConvS2S [ 9], all of which use convolutional neural networks as basic building block . In these models, the number of operations required to relate signals from two arbitrary input or output positions grows in the distance between positions . This makes it more difficult to learn dependencies between distant positions [ 12].\n\nSelf-attention is an attention mechanism relating different positions of a single sequence in order to compute a representation of the sequence . It has been used successfully in a variety of tasks including reading comprehension, abstractive summarization, textual entailment and learning task-independent sentence representations [4, 27, 28, 22]. End-to-end memory networks are based on a recurrent attention mechanism instead of sequence- aligned recurrence .\n\nIn the following sections, we will describe the Transformer, motivate self-attention and discuss its advantages over models such as [17, 18] and [9]. Model Architecture Most competitive neural sequence transduction models have an encoder-decoder structure [ 5,2,35]. Here, the encoder maps an input sequence of symbol representations (x1, ..., x n) to a sequence of continuous representations z= (z1, ...., z n). At each step the model is auto-regressive [\n\nEncoder is composed of a stack of N= 6 identical layers . Each layer has two sub-layers . The first is a multi-head self-attention mechanism, and the second is an integrated feed-forward network .\n\nThe decoder is composed of a stack of N= 6identical layers . Similar to the encoder, we employ residual connections around each of the sub-layers, followed by layer normalization .\n\nMulti-Head Attention We call our particular attention \"Scaled Dot-Product Attention\" We compute the dot products of the query with all keys, divide each bydk, and apply a softmax function to obtain the weights on the values . The keys and values are also packed together into matrices KandV .\n\nadditive attention is identical to our algorithm, except for the scaling factor of1dk . Additive attention computes the compatibility function using a feed-forward network with a single hidden layer . Dot-product attention is much faster and more space-efficient in practice .\n\ndk, the dot products grow large in magnitude, pushing the softmax function into regions where it has extremely small gradients4 . To counteract this effect, we scale the Dot products by1dk . We found it beneficial to linearly project the queries, keys and values htimes .\n\nMulti-head attention allows the model to jointly attend to information from different representation subspaces at different positions . With a single attention head, averaging inhibits this . In this work we employ h= 8 parallel attention layers, or heads .\n\nThe Transformer uses multi-head attention in three different ways . In \"encoder-decoder attention\" layers, the queries come from the previous decoder layer . Each position in the encoder can attend to all positions in the input sequence .\n\nSelf-attention layers in the decoder allow each position to attend to all positions up to and including that position . We implement this inside of scaled dot-product attention by masking out (setting to ) all values in the input of the softmax which correspond to illegal connections .\n\nthe inner-layer has dimensionality dff= 2048 . We use learned embeddings to convert input tokens and output tokens to vectors of dimension dmodel .\n\nnis the sequence length, per-layer complexity and minimum number of sequential operations for different layers . Layer Type Complexity per Layer Sequential Maximum Path Length Operations Self-Attention O(n2d) O(1) O(1) Convolutional O(knd2) O(1) (logk(n)) 3.5 Positional Encoding Since our model contains no recurrence, we must inject some information about the relative or absolute position of the tokens in the sequence .\n\nthe positional encodings have the same dimension dmodel as the embeddings . We use sine and cosine functions of different frequencies . Each dimension corresponds to a sinusoid .\n\nWe chose the sinusoidal version because it may allow the model to extrapolate to sequence lengths longer than the ones encountered during training . We compare various aspects of self-attention layers to the recurrent and convolu- tional layers commonly used for mapping one variable-length sequence of symbol representations (x1, ..., x n) to another sequence of equal length (z1, ...., z n), with xi, ziRd .\n\nLearning long-range dependencies is a key challenge in many sequence transduction tasks . The shorter these paths between any combination of positions in the input and output sequences, the easier it is to learn . Hence we compare the maximum path length between any two output and output positions in networks composed of the different layers .\n\na self-attention layer connects all positions with a constant number of sequentially executed operations . a recurrent layer requires O(n)sequential operations, whereas a sequence 6 length nis smaller than the representation dimensionality d . To improve computational performance for tasks involving very long sequences, self- attention could be restricted to considering only a neighborhood of size rin the input sequence centered around the respective output position.\n\na single convolutional layer with kernel width k  n does not connect all pairs of input and output positions . Doing so requires a stack of O(n/k)convolutional layers in the case of contiguous kernels, orO(logk(n)) in the cases of dilated convolutions [ 18], increasing the length of the longest paths between any two positions in the network . Convolutions are generally more expensive than recurrent layers, by a factor of\n\n5.1 Training Data and Batching We trained on the standard WMT 2014 English-German dataset consisting of about 4.5 million sentence pairs . Sentences were encoded using byte-pair encoding [ 3], which has a shared source- target vocabulary of about 37000 tokens .\n\n5.2 Hardware and Schedule We trained our models on one machine with 8 NVIDIA P100 GPUs . For our big models, step time was 1.0 seconds . The big models were trained for 300,000 steps (3.5 days)\n\nThe Transformer achieves better BLEU scores than previous state-of-the-art models on the German and English-to-French newstest2014 tests at a fraction of the training cost .\n\nConvS2S [9] 25.16 40.46 9.610181.51020 MoE [32] 26.03 40.56 2.010191.21010 Deep-Att + PosUnk Ensemble [39] 40.4 8.01015 GNMT + RL Ensemble [38] 26 .30 41.16 1.810221.11021 Transformer (base model) During training, we employed label smoothing of value ls= 0.1[36\n\nOn the WMT 2014 English-to-German translation task, the big transformer model (Transformer (big) in Table 2) outperforms the best previously reported models by more than 2.0 BLEU . Even our base model surpasses all previously published models and ensembles, at a fraction of the training cost of any of the competitive models .\n\nWe used beam search with a beam size of 4and length penalty = 0.6[38]. These hyperparameters were chosen after experimentation on the development set . Table 2 summarizes our results and compares our translation quality and training costs to other model architectures from the literature .\n\nUnlisted values are identical to those of the base model . All metrics are on the English-to-German translation development set, newstest2013 . Listed perplexities are per-wordpiece according to our byte-pair encoding .\n\nWe used beam search as described in previous section, but no checkpoint averaging . In Table 3 rows (A), we vary the number of attention heads and the attention key and value dimensions .\n\nIn Table 3 rows (B), we observe that reducing the attention key size dkhurts model quality . This suggests that determining compatibility is not easy and that a more sophisticated compatibility function than dot product may be beneficial . In row (E) we replace our sinusoidal positional encoding with learned positional embeddings [ 9], and observe nearly identical results to the base model .\n\nRNN sequence-to-sequence models have not been able to attain state-of-the-art results in small-data regimes [37]. We trained a 4-layer transformer with dmodel = 1024 on the Wall Street Journal portion of the Penn Treebank [25], about 40K training sentences . We also trained it in a semi-supervised setting .\n\nTable 4: The Transformer generalizes well to English constituency parsing . Results are on Section 23 of WSJ .\n\nMultitask 93.0 Dyer et al. (2016) [8] generative 93.3 increased the maximum output length to input length + 300 . We used a beam size of 21and= 0.3 for both WSJ only and the semi-supervised setting . In contrast to RNN sequence-to-sequence models [37], the Transformer outperforms Berkeley-Parser [29] even when training only on the WSj training set of 40K sentences .\n\nTransformer can be trained significantly faster than architectures based on recurrent or convolutional layers . In the former task our best model outperforms even previously reported ensembles . We plan to extend the Transformer to problems involving input and output modalities other than text .\n\nNal Kalchbrenner and Stephan Gouws are grateful for their fruitful comments, corrections and inspiration . References [1]Jimmy Lei Ba, Jamie Ryan Kiros, and Geoffrey E Hinton. Layer normalization .\n\nKyunghyun Cho, Bart van Merrienboer, Caglar Gulcehre, Fethi Bougares, Holger Schwenk, and Yoshua Bengio. Learning phrase representations using rnn encoder-decoder for statistical machine translation. CoRR , abs/1406.1078, 2014. [6]Francois Chollet. Xception: Deep learning with depthwise separable convolutions.\n\n[10] Alex Graves. Generating sequences with recurrent neural networks . [11] Kaiming He, Xiangyu Zhang, Shaoqing Ren, and Jian Sun. Deep residual learning for im- age recognition .\n\nIn Proceedings of the 2009 Conference on Empirical Methods in Natural Language Processing , pages 832\u2013841. ACL, August 2009. [15] Rafal Jozefowicz, Oriol Vinyals, Mike Schuster, Noam Shazeer, and Yonghui Wu. Exploring the limits of language modeling.\n\nYoon Kim, Carl Denton, Luong Hoang, and Alexander M. Rush. Structured attention networks . InInternational Conference on Learning Representations , 2017. [20] Oleksii Kuchaiev and Boris Ginsburg. Factorization tricks for LSTM networks. arXiv preprint arxiv:1703.10722 . [22] Zhouhan Lin, Minwei Feng, Cicero Nogueira dos Santos, Mo Yu, Bing \n\n[24] Minh-Thang Luong, Hieu Pham, and Christopher D Manning . Effective approaches to attention- based neural machine translation . arXiv preprint arxiv:1508.04025 , 2015.\n\nSlav Petrov, Leon Barrett, Romain Thibaux, and Dan Klein . Learning accurate, compact, and interpretable tree annotation . In Proceedings of the 21st International Conference on Computational Linguistics .\n\nNitish Srivastava, Geoffrey E Hinton, Alex Krizhevsky, Ilya Sutskever, and Ruslan Salakhutdi- nov. Dropout: simple way to prevent neural networks from overfitting . In Advances in Neural Information Processing Systems, pages 2440\u20132448 .\n\nGoogle\u2019s neural machine translation system: Bridging the gap between human and machine translation . CoRR , abs/1512.00567, 2015. [37] Vinyals & Kaiser, Koo, Petrov, Sutskever, and Hinton. Grammar as foreign language. In Advances in Neural Information Processing Systems .\n\nAttention Visualizations Input-Input Layer5 It is in this spirit that a majority of American governments have passed new laws since 2009 making the registration or voting process more difficult . Many of the attention heads attend to a distant dependency of the encoder self-attention in layer 5 of 6.\n\nInput-Input Layer5 The Law will never be perfect , but its application should be just - this is what we are missing , in my opinion . Attentions here shown only for the word \u2018making\u2019. Different colors represent different heads. Best viewed in color .\n\n14 Input-Input Layer5 The Law will never be perfect , but its application should be just - this is what we are missing , in my opinion . Note that the attentions are very sharp for this word .", "Conclusion": "we give two examples from two different heads from the encoder self-attention . The heads clearly learned to perform different tasks ."}